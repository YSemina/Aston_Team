/***
 * написать приложение, которое будет реализовывать алгоритм сортировки по переданным классам.  Вся архитектура и код
 * стайл должны соответствовать конвенциям языка Java.Программа должна выполняться в цикле. Выход из цикла возможен
 * только путем соответствующего выбора пользователя. Пользователь должен иметь возможность выбирать варианты заполнения
 * исходного массива данных (из файла, рандом, вручную) и его длину. Также у пользователя должна быть возможность найти
 * какой-либо элемент отсортированной коллекции при помощи алгоритма бинарного поиска, которые также необходимо
 * реализовать. Сортировки и бинарный поиск должны быть реализованы с использованием дженериков и быть универсальными
 * под любые классы программы. В программе должен использовать паттерн стратегия. Сортировать необходимо кастомные
 * классы - класс должен иметь реализованный паттерн Builder. Для вводимых данных (в тч из файла) должна производится
 * валидация данных.
 *  Доп. задание: дополнительно к основным сортировкам реализовать эти же алгоритмы сортировки таким
 * образом, что классы будут сортироваться по какому-либо числовому полю таким образом, что классы с четными значениями
 * будут сортироваться в натуральном порядке, а с нечетными оставаться на своих местах.
 *  Доп. доп. задание: Необходимо реализовать функционал для записи отсортированных коллекций/найденных значений в файл
 * в режиме добавления данных.
 * Классы: Животное (Вид, Цвет глаз, Шерсть (булка)), Бочка (Объем, Хранимый материал, Материал из которого изготовлена)
 * , Человек (Пол, Возраст, Фамилия) Сортировка - InsertionSort
 */

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running) {
            System.out.println("Выберите способ заполнения массива: 1 - из файла, 2 - рандом, 3 - вручную, 0 - выход");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    // Логика загрузки из файла
                    break;
                case 2:
                    // Логика генерации рандомных данных
                    break;
                case 3:
                    // Логика ручного ввода данных
                    break;
                case 0:
                    running = false;
                    break;
                default:
                    System.out.println("Некорректный выбор. Попробуйте снова.");
            }

            // Сортировка
            System.out.println("Выберите метод сортировки: 1 - Вставками");
            int sortChoice = scanner.nextInt();
            SortingStrategy<Animal> sortingStrategy = new InsertionSort<>();

            // Пример использования
            Animal[] animals = {}; // Заполненный массив животных
            sortingStrategy.sort(animals);
            // Бинарный поиск
            System.out.println("Введите элемент для поиска:");
            String searchKey = scanner.next(); // Предполагается, что это поле species
            BinarySearch<Animal> binarySearch = new BinarySearch<>();
            int index = binarySearch.search(animals, new Animal.Builder().species(searchKey).build());

            if (index != -1) {
                System.out.println("Элемент найден на индексе: " + index);
            } else {
                System.out.println("Элемент не найден.");
            }
        }

        scanner.close();
    }
}
